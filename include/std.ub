#include core.ub
#include heap.ub

// Implement logic, to include system relevant things depending on actual system
#include linux.ub

fun print_char_ptr(arr: char *, len: number): number {
    return sys_write(1, arr, len);
};

fun print_str(str: string, len: number): number {
    return print_char_ptr(str as char *, len);
};

fun cstrlen(buf: char *): number {
    let mut i: number = 0;
    let mut s: char* = buf;

    while (s @1) != 0 {
        i += 1;
        s += 1;
    };

    return i;
};

fun itoa(n: number, base: number, buf_end: char *mut): number {
    (buf_end as char *mut) @= '\0';
    let mut current: char *mut = buf_end-1;

    let mut t: number = n;

    while true {
        let mut new: number = ('0' as number) + (t % base);

        // Skips from ascii numbers to letters, to correctly represent hex numbers
        if new > 57 {
            new = (new % 57) + ('A' as number) - 1;
        };

        (current -= sizeof[char]) @= new as char;

        t /= base;

        if t == 0 { break };
    };

    return (buf_end - current) as number;
};

fun print_num(n: number, base: number): void {
    let begin_ptr: char *mut = malloc(128) as char *mut;
    let buf_end: char *mut = begin_ptr + 128;

    let size: number = itoa(n, base, buf_end);

    print_char_ptr((buf_end - size) as char *, size);

    free(begin_ptr as void *mut);

    return;
};

fun println_num(n: number, base: number): void {
    print_num(n, base);
    print_str("\n", 1);
    return;
};
