fun cstrlen(buf: char *): u64 {
    let mut i: u64 = 0;
    let mut s: char * = buf;

    while *s != '\0' {
        i += 1;
        s += 1;
    };

    return i;
};

fun cstrcmp(a: char *, b: char *): u64 {
    while *a != '\0' {

        if *a != *b {
            break;
        };

        a += 1;
        b += 1;
    };

    return (*a) as u64 - (*b) as u64;
};

fun cstreq(a: char *, b: char *): bool { return cstrcmp(a, b) == 0; };

fun cstrcpy_len(destination: char *mut, origin: char *, len: u64): char * {
    if destination == NULL {
        return NULL as char *;
    };

    let ptr: char *mut = destination;

    for let mut i: u64 = 0; i < len; i += 1 {
        destination @= *origin;
        destination += 1;
        origin += 1;
    };

    destination @= '\0';

    return ptr as char *;
};

fun cstrcpy(destination: char *mut, origin: char *): char * {
    return cstrcpy_len(destination, origin, cstrlen(origin));
};