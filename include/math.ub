fun abs(n: u64): u64 {
    let y: u64 = n >> ((sizeof[u64] * 8) - 1);
    return (n ^ y) - y;
};

fun fast_abs(n: u64): u64 { return ((n >> ((sizeof[u64] * 8)-2)) | 1) * n };

fun pow(x: u64, n: u64): u64 {

    let mut temp: u64 = 0;
    if n == 0 {
        return 1;
    };

    temp = pow(x, n / 2);
    if (n % 2) == 0 {
        return temp * temp;
    } else {
        return x * temp * temp;
    };

    return 0;
};