#include std.ub

fun fib(n: number): number {
	if n <= 1 {
		return n;
	};

	return fib(n-1) + fib(n-2);
};

fun fib_dyn(limit: number): number* {
	# TODO: add dynamic array sizes
	let mem: number *mut = [<number>; 300];

	if limit >= 300 {
		return mem as number*;	
	};

	for let mut i: number = 0; i <= 1; i += 1 {
		let el_ptr: number *mut = num_ptr_to_index(mem, i);
		el_ptr =& i;
	};

	for let mut i: number = 2; i <= limit; i += 1 {
		let el_ptr: number *mut = num_ptr_to_index(mem, i);
		el_ptr =& get_num_arr_index(mem as number*, i-1) + get_num_arr_index(mem as number*, i-2);
	};

	return mem as number*;
};
